// <auto-generated />
using System;
using DepoiTEFDataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DepoiTEFDataStorage.Migrations
{
    [DbContext(typeof(DepoiTDbContext))]
    partial class DepoiTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DepoiTItems.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Apartment")
                        .HasColumnType("int");

                    b.Property<string>("ApartmentIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Building")
                        .HasColumnType("int");

                    b.Property<string>("BuildingIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DepoiTItems.Depot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdressId")
                        .HasColumnType("int");

                    b.Property<int?>("CoordinatesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.HasIndex("CoordinatesId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Depots");
                });

            modelBuilder.Entity("DepoiTItems.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FieldPatternId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerializedValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldPatternId");

                    b.HasIndex("ItemId");

                    b.ToTable("Fields");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Field");
                });

            modelBuilder.Entity("DepoiTItems.FieldPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PatternId")
                        .HasColumnType("int");

                    b.Property<string>("SerializedValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PatternId");

                    b.ToTable("FieldPatterns");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FieldPattern");
                });

            modelBuilder.Entity("DepoiTItems.GeoCoordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeoCoordinates");
                });

            modelBuilder.Entity("DepoiTItems.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatternId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatternId");

                    b.HasIndex("StorageId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DepoiTItems.Pattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Patterns");
                });

            modelBuilder.Entity("DepoiTItems.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("DepoiTItems.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepotId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSplitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("DepoiTItems.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthenticationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@mail.com",
                            IsAuthenticated = false,
                            Name = "admin",
                            ObjectToken = "a(qSa3Y/P{d.-iHDG~n/f.g/\"",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKBOCdrUFEKQLlXdpRNnryUOg/gypmqO/mFzVx3FwMNjTipxWppGPOaMfix5PlvCA==",
                            UserToken = "87h4vhusd1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@mail.com",
                            IsAuthenticated = false,
                            Name = "user",
                            ObjectToken = "~ex`+Elp.4I@)>#j8Fix'$j-2",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKBOCdrUFEKQLlXdpRNnryUOg/gypmqO/mFzVx3FwMNjTipxWppGPOaMfix5PlvCA==",
                            UserToken = "02vtr39sfd"
                        });
                });

            modelBuilder.Entity("DepoiTItems.NumberField", b =>
                {
                    b.HasBaseType("DepoiTItems.Field");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("NumberField");
                });

            modelBuilder.Entity("DepoiTItems.NumberPattern", b =>
                {
                    b.HasBaseType("DepoiTItems.FieldPattern");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("NumberPattern");
                });

            modelBuilder.Entity("DepoiTItems.Depot", b =>
                {
                    b.HasOne("DepoiTItems.Address", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId");

                    b.HasOne("DepoiTItems.GeoCoordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesId");

                    b.HasOne("DepoiTItems.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Adress");

                    b.Navigation("Coordinates");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DepoiTItems.Field", b =>
                {
                    b.HasOne("DepoiTItems.FieldPattern", "FieldPattern")
                        .WithMany()
                        .HasForeignKey("FieldPatternId");

                    b.HasOne("DepoiTItems.Item", null)
                        .WithMany("Fields")
                        .HasForeignKey("ItemId");

                    b.Navigation("FieldPattern");
                });

            modelBuilder.Entity("DepoiTItems.FieldPattern", b =>
                {
                    b.HasOne("DepoiTItems.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("DepoiTItems.Pattern", null)
                        .WithMany("FieldPatterns")
                        .HasForeignKey("PatternId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DepoiTItems.Item", b =>
                {
                    b.HasOne("DepoiTItems.Pattern", "Pattern")
                        .WithMany()
                        .HasForeignKey("PatternId");

                    b.HasOne("DepoiTItems.Storage", null)
                        .WithMany("Items")
                        .HasForeignKey("StorageId");

                    b.Navigation("Pattern");
                });

            modelBuilder.Entity("DepoiTItems.Pattern", b =>
                {
                    b.HasOne("DepoiTItems.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DepoiTItems.Storage", b =>
                {
                    b.HasOne("DepoiTItems.Depot", null)
                        .WithMany("Storages")
                        .HasForeignKey("DepotId");
                });

            modelBuilder.Entity("DepoiTItems.User", b =>
                {
                    b.HasOne("DepoiTItems.Photo", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("DepoiTItems.Depot", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("DepoiTItems.Item", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("DepoiTItems.Pattern", b =>
                {
                    b.Navigation("FieldPatterns");
                });

            modelBuilder.Entity("DepoiTItems.Storage", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
